#import all the libraries we need
import time
from scapy.all import sniff, IP, TCP

#Welcome and explain the program
print("Welcome to Py Snortlings 2.0!")
print("This program will sniff packets on your network and alert you if it sees any anamolous activity.")
print("It will suggest both snort and UFW rules to alert or block the traffic.")
print("It can parse through pcap files or sniff live traffic.")
print("---------------------------------------------------------")
print("---------------------------------------------------------")

#set the program to either sniff live or parse a pcap
print("Do you want to sniff live traffic (L) or parse a pcap file (P)?")
choice = input("Choice? (L/P): ")

#Live Traffic sniffing code
if choice == "L":
    print("You chose to sniff live traffic.")
    print("Please enter the interface you want to sniff on (e.g. eth0, wlan0):")
    interface = input("Interface: ")
    print("Sniffing on interface " + interface + "...")
         
    #Setting variables
    syn_count = 0
    start_time = time.time()
    scan_count = {}

    #SYN Flood Detection
    def detect_syn(packet):
        global syn_count, start_time

        if packet.haslayer(TCP) and packet[TCP].flags == "S":
            syn_count += 1

        # Check every second
        if time.time() - start_time >= 1:
            print(f"SYN packets detected: {syn_count}/sec")

            # Alert if SYN flood threshold is exceeded
            if syn_count > 20:  # Adjust threshold as needed
                print("ðŸš¨ Possible SYN flood detected! Suggested Snort rule:")
                print(f'alert tcp any any -> $HOME_NET any (flags:S; msg:"Possible SYN flood detected"; threshold: type threshold, track by_src, count {syn_count}, seconds 1; sid:1000001; rev:1;)')

            # Reset counter
            syn_count = 0
            start_time = time.time()
    
    # Port Scan Detection
    def detect_scan(packet):
        packet.summary()
        global scan_count, start_time

        if packet.haslayer(TCP) and packet[TCP].flags == "S":
            src_ip = packet[IP].src
            dst_port = packet[TCP].dport

            if src_ip not in scan_count:
                scan_count[src_ip] = set()
            scan_count[src_ip].add(dst_port)

        # Check every second
        if time.time() - start_time >= 1:
            for ip, ports in scan_count.items():
                if len(ports) > 10:  # Adjust threshold as needed
                    print(f"ðŸš¨ Possible port scan detected from {ip}! Suggested Snort rule:")
                    print(f'alert tcp {ip} any -> $HOME_NET any (flags:S; msg:"Possible port scan detected"; threshold: type threshold, track by_src, count {len(ports)}, seconds 1; sid:1000002; rev:1;)')

            # Reset counter
            scan_count = {}
            start_time = time.time()
    
    # Start sniffing
    sniff(filter="tcp", prn=detect_syn or detect_scan, store=0)

#Pcap parsing 
elif choice == "P":
    pcap_file = input("Please enter the path to the pcap file: ")
    print("Parsing file: " + pcap_file + "...")
