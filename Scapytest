# python script to simulate SYN flood attack and PORT scanning
from scapy.all import sniff, TCP, IP, send
p= sniff(count=5,filter="tcp")
p.summary()
p[0][1].show()
for i in range(100):
        npkt = IP(dst="172.31.15.86") / TCP(dport=80, flags="S")
        send(npkt)
for port in range(20, 1024):  # Scan ports 20-1024
    packet = IP(dst="172.31.12.39") / TCP(dport=port, flags="S")
    send(packet)


# python script to sniff packets for any SYN flood and alert user with a snort rule 
from scapy.all import sniff, IP, TCP
import time

syn_count = 0
start_time = time.time()

def detect_syn(packet):
    global syn_count, start_time

    if packet.haslayer(TCP) and packet[TCP].flags == "S":
        syn_count += 1

    # Check every second
    if time.time() - start_time >= 1:
        print(f"SYN packets detected: {syn_count}/sec")

        # Alert if SYN flood threshold is exceeded
        if syn_count > 20:  # Adjust threshold as needed
            print("ðŸš¨ Possible SYN flood detected! Suggested Snort rule:")
            print(f'alert tcp any any -> $HOME_NET any (flags:S; msg:"Possible SYN flood detected"; threshold: type threshold, track by_src, count {syn_count}, seconds 1; sid:1000001; rev:1;)')

        # Reset counter
        syn_count = 0
        start_time = time.time()

# Start sniffing
sniff(filter="tcp", prn=detect_syn, store=0)

# python script to sniff packets for any PORT scn and alert user with a snort rule 
from scapy.all import sniff, IP, TCP
import time

scan_count = {}
start_time = time.time()

def detect_scan(packet):
    packet.summary()
    global scan_count, start_time

    if packet.haslayer(TCP) and packet[TCP].flags == "S":
        src_ip = packet[IP].src
        dst_port = packet[TCP].dport

        if src_ip not in scan_count:
            scan_count[src_ip] = set()
        scan_count[src_ip].add(dst_port)

    # Check every second
    if time.time() - start_time >= 1:
        for ip, ports in scan_count.items():
            if len(ports) > 10:  # Adjust threshold as needed
                print(f"ðŸš¨ Possible port scan detected from {ip}! Suggested Snort rule:")
                print(f'alert tcp {ip} any -> $HOME_NET any (flags:S; msg:"Possible port scan detected"; threshold: type threshold, track by_src, count {len(ports)}, seconds 1; sid:1000002; rev:1;)')

        # Reset counter
        scan_count = {}
        start_time = time.time()

# Start sniffing
sniff(filter="tcp", prn=detect_scan, store=0)

